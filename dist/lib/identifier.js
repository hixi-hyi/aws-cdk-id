"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rank_1 = require("./rank");
function toCamel(s) {
    return s.charAt(0).toUpperCase() + s.slice(1);
}
function toCamels(s) {
    return s.reduce((acc, word) => acc + toCamel(word), '');
}
class Identifier {
    constructor(r) {
        this.childs = new Array();
        this.rank = new rank_1.Rank(r);
    }
    child(value) {
        const id = this.copy();
        if (typeof value === 'string') {
            id.childs.push(toCamel(value));
            return id;
        }
        else {
            if (id.childs.length !== 0) {
                throw new Error(`Error: It is forbidden to call 'child(IRank)' functions, after 'child(string)`);
            }
            id.rank = id.rank.copy(value);
            return id;
        }
    }
    copy() {
        const id = new Identifier(this.rank);
        id.childs = Array.from(this.childs);
        return id;
    }
    get getChilds() {
        return Array.from(this.childs);
    }
    get parent() {
        const id = this.copy();
        id.childs.pop();
        return id;
    }
    scope(callback) {
        callback(this.copy());
    }
    get stackName() {
        return this.rank.toCamelString();
    }
    get constructName() {
        const length = this.childs.length;
        if (length === 0) {
            throw new Error(`Error: Does not have any child. Please call 'child(string)'`);
        }
        // The cdk.Construct names `LogicalId` using `scope`(args[0]) and `id`(args[1]).
        // The scope that nested function already set `id` to `scope`, so constructName() only return last value of array.
        const word = this.childs[length - 1];
        return toCamel(word);
    }
    exportName(s) {
        if (this.childs.length === 0) {
            return this.stackName + ':' + s;
        }
        return this.stackName + ':' + toCamels(this.childs) + ':' + toCamel(s);
    }
    get camelName() {
        return this.stackName + toCamels(this.childs);
    }
    get slashName() {
        const array = [this.rank.toSlashString(), ...this.childs];
        return array.join('/').toLowerCase();
    }
    get dotName() {
        const array = [this.rank.toDotString(), ...this.childs];
        return array.join('.').toLowerCase();
    }
    get dashName() {
        const array = [this.rank.toDashString(), ...this.childs];
        return array.join('-').toLowerCase();
    }
}
exports.Identifier = Identifier;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlbnRpZmllci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9pZGVudGlmaWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQXFDO0FBRXJDLFNBQVMsT0FBTyxDQUFDLENBQVM7SUFDeEIsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEQsQ0FBQztBQUVELFNBQVMsUUFBUSxDQUFDLENBQVc7SUFDM0IsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMxRCxDQUFDO0FBRUQsTUFBYSxVQUFVO0lBR3JCLFlBQVksQ0FBUTtRQUZaLFdBQU0sR0FBYSxJQUFJLEtBQUssRUFBRSxDQUFDO1FBR3JDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxXQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFxQjtRQUNoQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkIsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDN0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDL0IsT0FBTyxFQUFFLENBQUM7U0FDWDthQUFNO1lBQ0wsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0VBQStFLENBQUMsQ0FBQzthQUNsRztZQUNELEVBQUUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMs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UmFuayB9IGZyb20gJy4vcmFuayc7XG5cbmZ1bmN0aW9uIHRvQ2FtZWwoczogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHMuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzLnNsaWNlKDEpO1xufVxuXG5mdW5jdGlvbiB0b0NhbWVscyhzOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gIHJldHVybiBzLnJlZHVjZSgoYWNjLCB3b3JkKSA9PiBhY2MgKyB0b0NhbWVsKHdvcmQpLCAnJyk7XG59XG5cbmV4cG9ydCBjbGFzcyBJZGVudGlmaWVyIHtcbiAgcHJpdmF0ZSBjaGlsZHM6IHN0cmluZ1tdID0gbmV3IEFycmF5KCk7XG4gIHB1YmxpYyByYW5rOiBSYW5rO1xuICBjb25zdHJ1Y3RvcihyOiBJUmFuaykge1xuICAgIHRoaXMucmFuayA9IG5ldyBSYW5rKHIpO1xuICB9XG5cbiAgcHVibGljIGNoaWxkKHZhbHVlOiBzdHJpbmcgfCBJUmFuayk6IElkZW50aWZpZXIge1xuICAgIGNvbnN0IGlkID0gdGhpcy5jb3B5KCk7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlkLmNoaWxkcy5wdXNoKHRvQ2FtZWwodmFsdWUpKTtcbiAgICAgIHJldHVybiBpZDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlkLmNoaWxkcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvcjogSXQgaXMgZm9yYmlkZGVuIHRvIGNhbGwgJ2NoaWxkKElSYW5rKScgZnVuY3Rpb25zLCBhZnRlciAnY2hpbGQoc3RyaW5nKWApO1xuICAgICAgfVxuICAgICAgaWQucmFuayA9IGlkLnJhbmsuY29weSh2YWx1ZSk7XG4gICAgICByZXR1cm4gaWQ7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGNvcHkoKTogSWRlbnRpZmllciB7XG4gICAgY29uc3QgaWQgPSBuZXcgSWRlbnRpZmllcih0aGlzLnJhbmspO1xuICAgIGlkLmNoaWxkcyA9IEFycmF5LmZyb20odGhpcy5jaGlsZHMpO1xuICAgIHJldHVybiBpZDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZ2V0Q2hpbGRzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmNoaWxkcyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHBhcmVudCgpOiBJZGVudGlmaWVyIHtcbiAgICBjb25zdCBpZCA9IHRoaXMuY29weSgpO1xuICAgIGlkLmNoaWxkcy5wb3AoKTtcbiAgICByZXR1cm4gaWQ7XG4gIH1cblxuICBwdWJsaWMgc2NvcGUoY2FsbGJhY2s6IChpZDogSWRlbnRpZmllcikgPT4gdm9pZCkge1xuICAgIGNhbGxiYWNrKHRoaXMuY29weSgpKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgc3RhY2tOYW1lKCk6IHN0cmluZ3tcbiAgICByZXR1cm4gdGhpcy5yYW5rLnRvQ2FtZWxTdHJpbmcoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgY29uc3RydWN0TmFtZSgpOiBzdHJpbmd7XG4gICAgY29uc3QgbGVuZ3RoID0gdGhpcy5jaGlsZHMubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3I6IERvZXMgbm90IGhhdmUgYW55IGNoaWxkLiBQbGVhc2UgY2FsbCAnY2hpbGQoc3RyaW5nKSdgKTtcbiAgICB9XG4gICAgLy8gVGhlIGNkay5Db25zdHJ1Y3QgbmFtZXMgYExvZ2ljYWxJZGAgdXNpbmcgYHNjb3BlYChhcmdzWzBdKSBhbmQgYGlkYChhcmdzWzFdKS5cbiAgICAvLyBUaGUgc2NvcGUgdGhhdCBuZXN0ZWQgZnVuY3Rpb24gYWxyZWFkeSBzZXQgYGlkYCB0byBgc2NvcGVgLCBzbyBjb25zdHJ1Y3ROYW1lKCkgb25seSByZXR1cm4gbGFzdCB2YWx1ZSBvZiBhcnJheS5cbiAgICBjb25zdCB3b3JkID0gdGhpcy5jaGlsZHNbbGVuZ3RoLTFdO1xuICAgIHJldHVybiB0b0NhbWVsKHdvcmQpO1xuICB9XG5cbiAgcHVibGljIGV4cG9ydE5hbWUoczogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5jaGlsZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGFja05hbWUgKyAnOicgKyBzO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zdGFja05hbWUgKyAnOicgKyB0b0NhbWVscyh0aGlzLmNoaWxkcykgICsgJzonICsgdG9DYW1lbChzKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgY2FtZWxOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuc3RhY2tOYW1lICsgdG9DYW1lbHModGhpcy5jaGlsZHMpO1xuICB9XG5cbiAgcHVibGljIGdldCBzbGFzaE5hbWUoKTogc3RyaW5nIHtcbiAgICBjb25zdCBhcnJheSA9IFsgdGhpcy5yYW5rLnRvU2xhc2hTdHJpbmcoKSwgLi4udGhpcy5jaGlsZHNdO1xuICAgIHJldHVybiBhcnJheS5qb2luKCcvJykudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZG90TmFtZSgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGFycmF5ID0gWyB0aGlzLnJhbmsudG9Eb3RTdHJpbmcoKSwgLi4udGhpcy5jaGlsZHNdO1xuICAgIHJldHVybiBhcnJheS5qb2luKCcuJykudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZGFzaE5hbWUoKTogc3RyaW5nIHtcbiAgICBjb25zdCBhcnJheSA9IFsgdGhpcy5yYW5rLnRvRGFzaFN0cmluZygpLCAuLi50aGlzLmNoaWxkc107XG4gICAgcmV0dXJuIGFycmF5LmpvaW4oJy0nKS50b0xvd2VyQ2FzZSgpO1xuICB9XG59XG4iXX0=