"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash = require("lodash");
const _ = lodash;
var RankLoc;
(function (RankLoc) {
    RankLoc[RankLoc["Empire"] = 0] = "Empire";
    RankLoc[RankLoc["Kingdom"] = 1] = "Kingdom";
    RankLoc[RankLoc["Division"] = 2] = "Division";
    RankLoc[RankLoc["Section"] = 3] = "Section";
    RankLoc[RankLoc["Legion"] = 4] = "Legion";
    RankLoc[RankLoc["Cohort"] = 5] = "Cohort";
    RankLoc[RankLoc["Family"] = 6] = "Family";
    RankLoc[RankLoc["Tribe"] = 7] = "Tribe";
    RankLoc[RankLoc["Genus"] = 8] = "Genus";
    RankLoc[RankLoc["Series"] = 9] = "Series";
    RankLoc[RankLoc["Species"] = 10] = "Species";
})(RankLoc = exports.RankLoc || (exports.RankLoc = {}));
class Rank {
    constructor(r) {
        this.empire = '';
        this.kingdom = '';
        this.division = '';
        this.section = '';
        this.legion = '';
        this.cohort = '';
        this.family = '';
        this.tribe = '';
        this.genus = '';
        this.series = '';
        this.species = '';
        this.expands(r);
        this.validate();
    }
    validate() {
        const values = this.toArray();
        values.forEach(v => {
            if (v !== v.toLowerCase()) {
                throw new Error(`Error: The capitalize string is not allowed. Because the value of IRank is used as a delimiter of StackName`);
            }
        });
    }
    expands(r) {
        this.empire = r.empire || this.empire;
        this.kingdom = r.kingdom || this.kingdom;
        this.division = r.division || this.division;
        this.section = r.section || this.section;
        this.legion = r.legion || this.legion;
        this.cohort = r.cohort || this.cohort;
        this.family = r.family || this.family;
        this.tribe = r.tribe || this.tribe;
        this.genus = r.genus || this.genus;
        this.series = r.series || this.series;
        this.species = r.species || this.species;
    }
    copy(r) {
        const ret = _.cloneDeep(this);
        if (r) {
            ret.expands(r);
        }
        this.validate();
        return ret;
    }
    toArray() {
        const array = new Array();
        array.push(this.empire);
        array.push(this.kingdom);
        array.push(this.division);
        array.push(this.section);
        array.push(this.legion);
        array.push(this.cohort);
        array.push(this.family);
        array.push(this.tribe);
        array.push(this.genus);
        array.push(this.series);
        array.push(this.species);
        return array;
    }
    toArrayWithLoc(start, end) {
        start = start !== undefined ? start : Rank.DEFAULT_START_LOC;
        end = end !== undefined ? end + 1 : undefined;
        const array = this.toArray().slice(start, end);
        return array.filter(Boolean);
    }
    getValue(loc) {
        return this.toArray()[loc];
    }
    toCamelString(start, end) {
        const array = this.toArrayWithLoc(start, end);
        return array.reduce((acc, word) => acc + word.charAt(0).toUpperCase() + word.slice(1), '');
    }
    toSlashString(start, end) {
        const array = this.toArrayWithLoc(start, end);
        return array.join('/');
    }
    toDotString(start, end) {
        const array = this.toArrayWithLoc(start, end);
        return array.join('.');
    }
}
exports.Rank = Rank;
Rank.DEFAULT_START_LOC = RankLoc.Empire;
//# sourceMappingURL=data:application/json;base64,